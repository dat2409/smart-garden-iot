// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @unique @default(autoincrement())
  email String @unique
  password String
  fullName String
  phoneNumber String
  gender String
  role Role @default(STAFF)
  dob DateTime @db.Date
  address String
  identityNumber String
}

model Tour {
  id Int @id @default(autoincrement())
  name String
  departure String
  departureTime DateTime
  days Int
  price Float
  desc String @db.LongText
  maxPeople Int
  sold Int @default(0)
  flight String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  destination Destination @relation(fields: [destinationName], references: [name], onDelete: Cascade)
  destinationName String
  plan Plan @relation(fields: [planName], references: [name], onDelete: Cascade)
  planName String
  services TourService[]
  order Order?
}

model Plan {
  id Int @id @default(autoincrement())
  name String @unique
  destination Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dayplans DayPlan[]
  tour Tour?
}

model DayPlan {
  id Int @id @default(autoincrement())
  day Int
  title String
  desc String @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId Int
}

model Order {
  id Int @id @unique @default(autoincrement())
  fullName String
  email String
  phoneNumber String
  address String
  note String @db.LongText
  quantity Int
  totalPrice Float
  isDeposited Boolean @default(false)
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId Int
  invoice Invoice?
}

model Invoice {
  id Int @id @default(autoincrement())
  depositedAt DateTime @default(now())
  paidAt DateTime @updatedAt
  isPaid Boolean @default(false)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int
}

model Destination {
  id Int @id @default(autoincrement())
  name String @unique
  address String
  desc String @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tours Tour[]
  plans Plan[]
  images Image[]
}

model Image {
  id Int @id @default(autoincrement())
  url String
  destination Destination @relation(fields: [destinationID], references: [id], onDelete: Cascade)
  destinationID Int
}

model Service {
  id Int @id @default(autoincrement())
  name String @unique
  tours TourService[]
}

model TourService {
  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade)
  tourId Int
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId Int

  @@id([tourId, serviceId])
}

enum Role {
  STAFF
  MANAGER
}
